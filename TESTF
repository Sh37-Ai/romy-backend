import firebase_admin
from firebase_admin import credentials, firestore
import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import firebase_admin
from firebase_admin import credentials, firestore
import joblib

def init_firebase_et_recuperer_donnees(json_path: str, collection_name: str, user_uid: str):
    """
    Initialise Firebase et retourne les valeurs du document correspondant à l'UID.
    """
    # --- Initialiser Firebase ---
    try:
        cred = credentials.Certificate(json_path)
        firebase_admin.initialize_app(cred)
        print("Connexion à Firebase réussie ✅")
    except Exception as e:
        print("Erreur lors de la connexion à Firebase :", e)
        exit(1)

    db = firestore.client()

    choix_data = []

    try:
        # Récupérer le document correspondant à l'UID
        docs = db.collection(collection_name).where("UserId", "==", user_uid).get()

        if not docs:
            print(f"Aucun document trouvé pour l'utilisateur {user_uid}.")
        else:
            # On peut quand même mettre 'for doc in [doc_snap]' pour garder la boucle
             for doc in docs:
               data = doc.to_dict()
               valeurs = data.get("valeur", [])
               choix_data.append(valeurs)

    except Exception as e:
        print("Erreur lors de la récupération des documents :", e)
        exit(1)

    return choix_data


# --- Exemple d'utilisation ---
if __name__ == "__main__":



  BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # dossier du script
  CSV_PATH = os.path.join(BASE_DIR, "rorschach_30000_10reponses_corr1.csv")
  print("Chemin utilisé :", CSV_PATH)

# --- Charger le dataset ---
  df = pd.read_csv(CSV_PATH, encoding="utf-8")
  print("Aperçu des données :")
  print(df.head())

# --- Séparer les features et le label ---
  X = df.drop("Label", axis=1)  # Les 9 réponses
  y = df["Label"]

# --- One-Hot Encoding des réponses ---
  X_encoded = pd.get_dummies(X)

# --- Séparer train/test ---
  X_train, X_test, y_train, y_test = train_test_split(
      X_encoded, y, test_size=0.2, random_state=45
  )

# --- Entraîner le Random Forest ---
  model = RandomForestClassifier(n_estimators=1000, random_state=45)
  model.fit(X_train, y_train)

# --- Évaluation ---
  y_pred = model.predict(X_test)
  print("\nAccuracy:", accuracy_score(y_test, y_pred))
  print("\nRapport de classification :\n", classification_report(y_test, y_pred))

# --- Exemple de test ---
  
   
  joblib.dump(model, os.path.join(BASE_DIR, "random_forest.pkl"))
  joblib.dump(X_encoded.columns, os.path.join(BASE_DIR, "features.pkl"))
  print("✅ Modèle et colonnes sauvegardés.")

  json_path = r"C:\Users\salah\TestIARumy\serviceAccountKey.json"
  collection_name = "choixxx"
  user_uid = "qUsu0HS3kYWSwevEFHiHL0Ad0Hw2"
  liste_choix = init_firebase_et_recuperer_donnees(json_path, collection_name, user_uid)
  print("Liste des choix récupérée :", liste_choix)
  test_example = pd.DataFrame(liste_choix,
                            columns=X.columns)
  test_encoded = pd.get_dummies(test_example).reindex(columns=X_encoded.columns, fill_value=0)
  prediction = model.predict(test_encoded)
  print("\nExemple de prédiction :", prediction[0])